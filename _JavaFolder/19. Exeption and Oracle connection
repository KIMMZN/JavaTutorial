오늘 배운것들

Java : 객체지향언어, 컴파일언어
예외처리
오라클연동(DAO,DTO)

예외처리,,
1. 에러                   vs            예외를 구분
  error                                   execption
컴파일언어                             실행중에
컴파일x                                 예기치못한이슈발생
↓                                        →오작동 ←사전에 방지
실행이안됨
에러는는 실행이 안됨, 예외는 실행이 됨

Java에서는 예외를 처리해주는 객체
→exception에서 정의

exception의 예)
→ Nullpointer ~
→ Indexoutof
→ Typemismatch

예외처리방법 2가지

1. 직접처리 - try catch finally
try catch란 직접 예외를 처리하는 구문
try 실행하고 실행중 예외가 발생하면 catch구문 실행.
finally는 try와 catch 아무거나 실행후  마지막 finally 실행

2. 떠넘기기(누구에게?  call한위치로)
메서드명() throws exception
메서드에서 exception 발생시 나를 call한 메서드가 처리

흐름.
컴파일(bin) .class파일
쓰레드
jvm
메서드 스택 힙


jvm ㅡ java virutal machine. // java binary 실행

ram 안에
jvm
oralce
등등

dto - data transfer object
java와 oracle의 데이터를 실어나르는 객체
dto 객체와 오라클의 튜플의 연관성이 있다
예) 오라클의 튜플이 2개라면 돌려줄때 객체도 2개가 필요하다

oracle
라이브러리 배포
소스파일묶음

라이브러리. 자바에서 jar파일로 배포함.배포형식 jar

//
** ojdb6 으로 개발하는 순서 **
//1.드라이버로드 1번만 하면 된다
//2. CRUD 작업이 있을 때 마다 다음 과정을 생각한다.
//2-1. 커넥션 가져오기
//2-2. 쿼리문 만들기
//2-3. 쿼리문 완성하기(Mapping)
//2-4. 쿼리문 전송하여 오라클에서 실행
//2-5. 오라클에서 리턴값 전송
//2-6. 자바에서 2-5에서 받은 리턴값 처리
//2-7. 커넥션 자원 반납(중요)

** 쿼리문을 실행하기 위한 객체와 메소드 **
String sql = "select * from myfood1";
sql 변수에 쿼리문 저장.

PreparedStatement pstmt = conn.prepareStatement(sql);
PreparedStatement 객체 - 쿼리문을 실행하기 위한 객체
conn.prepareStatement(sql)을 통해, 미리 작성된 sql 쿼리를 데이터베이스에 전달하고 실행할 수 있도록 준비함.

ResultSet rs = pstmt.executeQuery();
executeQuery() 메서드는 SELECT 문을 실행하는 메서드
메서드를 호출하면 데이터베이스에서 쿼리를 실행하고, 그 결과를 *ResultSet* 객체로 반환받음.
**ResultSet**은 쿼리 결과로 반환된 데이터들을 저장하는 객체로, 쿼리 결과에서 여러 행(row)을 처리할 수 있음.

rs.next()
rs.next(): ResultSet 객체는 쿼리 결과의 각 행을 가리키는 포인터를 가지고 있다.
이 포인터는 처음에는 결과의 첫 번째 행 이전에 위치합니다. 
rs.next()를 호출하면 포인터가 다음 행으로 이동하며, 데이터가 있는 행이면 true를 반환하고,
데이터가 더 이상 없으면 false를 반환함.

에)
while (rs.next()) {
    System.out.println("음식의 이름: " + rs.getString("name") + "  indate: " + rs.getTimestamp("indate"));
} 
이 코드는 while 반복문을 통해 결과 집합의 모든 행을 순차적으로 처리함 rs.next()가 false를 반환하면 반복문이 종료됨.




**데이터베이스와  연결 **
Connection conn = null;
 오라클 데이터베이스에 연결
conn = DriverManager.getConnection("url", "id", "pass");
Connection 객체는 데이터베이스와의 연결을 나타내는 인터페이스

DriverManager.getConnection() 메서드

- DriverManager: JDBC에서 데이터베이스와 연결을 관리하는 클래스 
이 클래스는 데이터베이스 드라이버를 통해 연결을 관리하고, 
getConnection() 메서드를 통해 특정 데이터베이스와의 연결을 제공함

- getConnection(): 이 메서드는 데이터베이스 URL, 사용자 이름, 비밀번호를 매개변수로 받아 해당 데이터베이스에 연결하고, 
그 연결을 나타내는 Connection 객체를 반환
 



**오라클 드라이버 로드 **
Class.forName(" ");
동적으로 클래스 로딩을 하는 메서드이다.
이 메서드는 주어진 클래스 이름("oracle.jdbc.driver.OracleDriver")을 문자열로 받아 해당 클래스를 메모리에 로드하고,
그 클래스의 정적 초기화 블록을 실행한다.

예) Class.forName("oracle.jdbc.driver.OracleDriver")
Class.forName() 메서드의 역할
클래스 로딩: 이 메서드는 파라미터로 받은 클래스 이름에 해당하는 클래스를 메모리에 로드한다.
즉, 해당 클래스가 JVM에 의해 실행될 수 있도록 준비하는 작업을 수행한다.

드라이버 로딩: 이 코드에서 중요한 부분은 JDBC 드라이버(여기서는 OracleDriver)를 로드하는 것인데,
데이터베이스 연결을 위해 필요한 드라이버를 메모리에 올린다. 
JDBC(Java Database Connectivity)에서 데이터베이스와 상호작용하려면 특정 데이터베이스용 드라이버가 필요하다. 
수업에서는 jar를 사용하였다.

정적 초기화: Class.forName()은 클래스 로드 시, 
해당 클래스의 **정적 초기화 블록(static initializer block)**이 실행되며, 
이 블록 안에서 필요한 설정이나 준비 작업이 이루어진다. 
Oracle JDBC 드라이버는 이 블록 안에서 자신을 드라이버 관리자(DriverManager)에 등록함.
//

**sql문 실행 **
int temp.executeUpdate()는 PreparedStatement 객체에서 SQL 문을 실행할 때 사용하는 메서드 중 하나이다. 
이 메서드는 데이터베이스에 변경이 발생하는 SQL 문을 실행할 때 사용됩니다.

주로 사용하는 SQL 문: INSERT, UPDATE, DELETE와 같은 데이터 변경 작업을 수행하는 SQL 문에서 사용한다.
리턴 값: int 형으로, 영향을 받은 행(row)의 개수를 반환한다.
예를 들어, 데이터베이스에서 3개의 레코드가 변경되었으면, executeUpdate()는 3을 반환합니다.

so temp가 0이면 변화가 없는것이고, 0 이상이면 변화가 있는것이다

