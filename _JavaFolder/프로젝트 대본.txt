프로젝트 대본

 안녕하세요.  ppt 시작 하겠습니다
 저는 김시온 이고요
 프로젝트 주제는
 pc inventory manager  입니다


프로젝트 하게 된 동기는
컴퓨터 관련 부품을 효율적으로 관리하고, 고객도 편리하게 주문할수 있는 프로그램을 만들고 싶어서 개발하게 됐습니다.

프로젝트 목표
회원 관리 기능을 구현 하여 회원 가입 및 로그인 기능을 통해 사용자 정보를 안전하게 관리하고, 
권한에 따라 접근을 제어하는것을 목표로 하였습니다

또 제품 관리 시스템을 구축하고 상품의 crud 기능을 구현하여, 제품 정보를 효율적으로 관리하고
데이터베이스에 안전하게 저장하는것을 목표로 하였습니다.

마지막으로 객체지향 설계를 통한 효율적인 개발을 목표로 하였습니다.



목차입니다
프로젝트 소개 개발분석, 주요기능, 기능시연, 후기로 구성되어있습니다

개발환경 입니다
ide는 이클립스를 사용하였습니다
db는 오라클 11g버전 사용하였고
언어는 자바 8버전 사용하였습니다
마지막으로 버전관리는 깃허브를 통해 하였습니다.

개발일정입니다
프로젝트를 시작할때 개발일정을 만들었지만 잘 지켜지지는 않았습니다

다음은 요구사항 정의 입니다.
관리자 프로그램과 사용자 프로그램이 나눠진 상태를 생각하여 요구서를 작성 하였습니다
관리자는 회원가입과 로그인 기능을 통해서 프로그램을 사용하고,
 상품을 CRUD할수 있고 회원의 주문정보를 확인할수 있습니다

회원은 회원가입과 로그인 기능을 통해서 프로그램을 사용하고,
관리자가 등록한 상품의 정보를 확인하여
상품을 주문할수 있습니다

다음은 유즈 케이스 입니다
사용자와 관리자 각각 회원가입을 하고 로그인 하여야 기능을 사용 할수 있습니다

다음은 erd 입니다

관리자와 상품은 일대 다 관계이고
관리자는 id로 식별 가능하고
상품은 상품넘버로 식별 가능합니다

상품과 주문도 일대다 관계 이고
주문은 주문번호로 식별 가능합니다

회원과 주문도 일대다 관계이고
회원은 id로 식별 가능 합니다

3. 다음은 주요기능과 사용 기술 입니다.
로그인 기능을 만들었고
사용한 기술은 싱글톤 패턴 입니다
 
사용자가 id와 패스워드를 입력하면
dto 객체를 통하여 정보를 저장하고
dao 객체를 통하여 데이터베이스 연결을 하는데

이때 싱글톤 패턴을 사용하였습니다.

사용한 이유는 데이터베이스 연결 관리의 효율성,
 데이터의 일관성 및 안정성을 보장하기 위해서 사용하였습니다


코드를 보면 사용 방법은(즉시초기화)- 멀티스레드에서 더 좋음

클래스의 생성자를 private으로 설정하여 외부에서 인스턴스 생성을 막습니다.
클래스 내부에서 private static으로 유일한 인스턴스를 선언하고, 초기에는 null로 설정합니다.
유일한 인스턴스를 반환하는 public 메서드를 제공하여, 다른 클래스에서 이 메서드를 통해 인스턴스에 접근하도록 합니다.



다음 기능은 회원가입 기능입니다
사용한 기술은 상속 입니다
상속은 super class의 속성과 메서드를 sub class에 물려받는 것을 의미합니다

여기선 jframe을 상속했는데 jframe은 java swing 라이브러리에서 제공하는 최상위 컨테이너로
gui창을 구현하는데 다양한 기능을 제공하기 때문에 사용하였습니다




다음은 상품 검색 기능 입니다
사용한 기술은 인터페이스 구현 입니다
actionlistener를 구현하여 사용 하였는데

implements 키워드로 구현하고
이벤트를 발생시키는 컴포넌트에 addactionlistener 메서드를 통해 리스너를 등록 합니다
actionpoerfomed 메서드에서 액션이 있을때의 동작을 코드로 작성하면 됩니다


다음은 상품 등록, 수정, 삭제 기능입니다
사용한 기술은 dto dao 설계 패턴을 사용하였습니다

dto는 데이터를 전송하기 위한 객체로 사용되고
dao는 데이터베이스와의 상호작용을 담당하는 객체로 사용 되는데

dao dto로 나눠 사용 하면 데이터베이스 접근 로직과 비지니스 로직을 분리할수 있어
코드의 가독성과 유지보수성이 향상되기 때문에 사용하였습니다.

다음은 프로그램 시연 입니다.

관리자 프로그램과









//


**캡슐화(Encapsulation)**란 객체 지향 프로그래밍의 중요한 개념 중 하나로, 데이터(속성)와 메서드(기능)를 하나의 클래스에 묶고, 외부에서의 직접적인 접근을 제한하는 것을 의미합니다. //








 
 