source
원시프로그램: 사람이작성 // * 확장자 : .java
         예) int a = 30;
              ↓ 
기계어번역(0,1조합) : <컴파일>
              ↓                
목적프로그램 :기계가이해 하는 프로그램 //  *확장자 : .class //바이너리파일

ctrl + f11
컴파일 후 *실행*


++언어의종류: 컴파일 vs인터프리터
                 예)자바     예)자바스크립트


설명:컴파일언어는 원시프로그램을 목적프로그램으로 컴파일하여 실행하는 언어이다
    예) 클래스에서 코드 작성후 CTRL F11로 컴파일하여 실행     

Java: JDK // JRE(JVM)-런타임과 관련         



*실행 : 은 목적프로그램을 주기억장치로 옮겨서 구동하는것

생각..: 실행중 ?
         목적프로그램은 실행중인가 ?    - no
                               ↓ 
		    주기억(RAM) 상주 ,,


컴파일 후 *실행* 
               ↓ (실행과 관련된것이 쓰레드)
THREAD 쓰레드: 목적프로그램을 실제로 *실행*하는 주체 (프로세스 내에서 실제로 작업을 수행하는 주체)



---------------------------------------------------
RunTime // JVM


main.class                  프로그램 클래스 로드(소스코드)   -->       runtime // jvm(stack , heap)
mage.class



runtime // jvm
Method                        stack                                      heap                                           
소스파일                      메서드call                                객체(인스턴스)                                 
멤버변수                         ↓                                        (생성과 사용 소멸과 관련)                  
Static(공용변수)               FILO                                                                                       
공용변수는                     지역변수도 저장
객체를 만들지 않아도 접근 가능

method와  heap은 공용으로 사용하는 영역. (공용변수)
stack은   공통x ,



final은 상수이다. 처음 값이 결정되면 바꿀 수 없다.
접근제어자, static, final은 다르다;



자료형
if for
클래스 객체 , jvm, 접근제어자, static , final
